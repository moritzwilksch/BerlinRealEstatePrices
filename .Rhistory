### Rooms
df[which(df$rooms %in% c("Zimmer k.A.", "k.A. Zimmer", "0")), "rooms"] = NA  # k.A. = keine Angabe = not given
df[which(df$rooms %in% c("Privatzimmer", "Einzelzimmer")), "rooms"] = "1"  # Privatzimmer <=> Private room, Einzelzimmer <=> Sinlge room
levels(df$rooms) = c(levels(df$rooms), "Shared", "Missing")
df[which(df$rooms == "Gemeinsames Zimmer"), "rooms"] = "Shared"  # Geimeinsames Zimmer <=> Shared room
df[which(is.na(df$rooms)), "rooms"] = "Missing"
# Exclude anything with more than 5 rooms or anything that only occurs once
tab = table(df$rooms)  # numerics (whole and decimal numbers) and text ("single room" [Einzelzimmer], "NA" [k.A.])
tab[tab > 1]  # only regard categories that occur multiple times
df = df %>% filter(rooms %in% names(tab[tab > 1] | is.na(df$rooms) | df$rooms == "Missing"))
df = df[as.numeric(as.character(df$rooms)) <= 5 | df$rooms %in% c("Shared", "Missing") | is.na(df$rooms), ]
# merge half-rooms into lower full rooms
df[which(df$rooms == 1.5), "rooms"] = "1"
df[which(df$rooms == 2.5), "rooms"] = "2"
df[which(df$rooms == 3.5), "rooms"] = "3"
df[which(df$rooms == 4.5), "rooms"] = "4"
df$rooms = droplevels(df$rooms)
ggplot(df, aes(x=rooms)) + geom_bar() + theme_bw()
colSums(is.na(df$rooms))
is.na(df$rooms)
sum(is.na(df$rooms))
library(arrow)
library(dplyr)
library(ggplot2)
df = read_parquet("data/berlin.parquet")
df = df %>% filter(!object_type %in% c("NURSING_HOME", "RETIREMENT_HOME"))
################### EDA & Stats ###################
# Have to be divided by 100 as they are saved as int in the DB.
df$square_meters = df$square_meters / 100  # is now m^2
df$price = df$price / 100  # is now EUR
###### Explicit NA Values ######
colSums(is.na(df), 0)  # ~10k rooms missing
###### Implicit NA Values ######
# Private Offer
table(df$private_offer) # No NAs
# Square Meters
sum(df$square_meters == 0)  # ~5k with 0 sqm size
df$square_meters[df$square_meters == 0, "square_meters"] = NA  # make explicit
###### General EDA ######
### Created at (time of scrape)
min(df$created_at)  # 2021-04-25 13:04:57 EDT
max(df$created_at)  # 2021-10-27 13:57:33 EDT
### Location (dirty!)
# df$location  # ZIPCODE Berlin [Borough], [Address]
### Object Type
table(df$object_type) # Originally: only 3 nursing homes & 17 retirement homes
df$object_type = droplevels(df$object_type)
### Square Meters
# Very few, extreme outliers! (10,000,000 m^2)
ggplot(data=df %>% filter(square_meters < 1000), aes(x=square_meters)) + geom_histogram(bins=60)
quantile_cutoff = quantile(df$square_meters, 0.99, na.rm=T) # remove top 1% of outliers
ggplot(data=df %>% filter(square_meters < quantile_cutoff), aes(x=square_meters)) + geom_histogram(bins=60) + theme_bw()
# Also excludes some of the price outliers
ggplot(data=df %>% filter(square_meters < quantile_cutoff), aes(x=price)) + geom_histogram(bins=60) + theme_bw()
### Rent/Buy
table(df$to_rent)
dfrent = df %>% filter(to_rent==TRUE)
dfbuy = df %>% filter(to_rent==FALSE)
# Seems to be unreliable/with outliers for each category. Rent price up to 21,474,836 EUR
# make explicit
df[df$price == 0, "price"] = NA
df = df %>% filter(price >= 100)  # everything below 100EUR rent can be considered a data entry error or a "per sqm" price
### Price
ggplot(data=df, aes(x=price)) + geom_histogram(bins=60) + theme_bw()+ facet_wrap(~to_rent)
# rent distribution highly skewed (potentially includes properties to buy)
# rent_cutoff = quantile(dfrent$price, 0.99)
# buy_cutoff = quantile(dfbuy$price, 0.99)
# dfrent = dfrent %>% filter(price <= rent_cutoff)
# dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# Rent prices
#ggplot(data=dfrent, aes(x=price)) + geom_histogram(bins=60) + theme_bw()  # some zeros
# Buy prices
#ggplot(data=dfbuy, aes(x=price)) + geom_histogram(bins=60) + theme_bw() # many zeros
### Private offer
table(df$private_offer, df$to_rent)  # fewer private offers than non-private
### Rooms
df[which(df$rooms %in% c("Zimmer k.A.", "k.A. Zimmer", "0")), "rooms"] = NA  # k.A. = keine Angabe = not given
df[which(df$rooms %in% c("Privatzimmer", "Einzelzimmer")), "rooms"] = "1"  # Privatzimmer <=> Private room, Einzelzimmer <=> Sinlge room
levels(df$rooms) = c(levels(df$rooms), "Shared", "Missing")
df[which(df$rooms == "Gemeinsames Zimmer"), "rooms"] = "Shared"  # Geimeinsames Zimmer <=> Shared room
df[which(is.na(df$rooms)), "rooms"] = "Missing"
# Exclude anything with more than 5 rooms or anything that only occurs once
tab = table(df$rooms)  # numerics (whole and decimal numbers) and text ("single room" [Einzelzimmer], "NA" [k.A.])
tab[tab > 1]  # only regard categories that occur multiple times
df = df %>% filter(rooms %in% names(tab[tab > 1] | is.na(df$rooms) | df$rooms == "Missing"))
df = df[as.numeric(as.character(df$rooms)) <= 5 | df$rooms %in% c("Shared", "Missing") | is.na(df$rooms), ]
# merge half-rooms into lower full rooms
df[which(df$rooms == 1.5), "rooms"] = "1"
df[which(df$rooms == 2.5), "rooms"] = "2"
df[which(df$rooms == 3.5), "rooms"] = "3"
df[which(df$rooms == 4.5), "rooms"] = "4"
df$rooms = droplevels(df$rooms)
ggplot(df, aes(x=rooms)) + geom_bar() + theme_bw()
### Square Meters
#sqm_cutoff = quantile(df$square_meters, 0.99, na.rm=T)
# df = df %>% filter(square_meters <= sqm_cutoff)
ggplot(df, aes(x=square_meters)) + geom_histogram() + theme_bw()
### ZIP Code
table(df$zip_code)  # some zips without data...
df$zip_code = droplevels(df$zip_code)
write_parquet(df, "data/berlin_clean.parquet")
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfall = read_parquet("data/berlin_clean.parquet") # NAs???????????????
dfrent = dfall %>% filter(to_rent == TRUE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "HOUSE"))
dfrent$object_type = droplevel(dfrent$object_type)
dfbuy = dfall %>% filter(to_rent == FALSE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "SHARED_APARTMENT"))
## some properties with to_rent == TRUE actually have SALES prices!!!
dfrent$ppsqm = dfrent$price / dfrent$square_meters  # price per sqm
dfbuy$ppsqm = dfbuy$price / dfbuy$square_meters  # price per sqm
# "Rentals" that are actually for SALE
ggplot(data=dfrent %>% filter(ppsqm < 200), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# most ppsqms are < 100 (sensible, although EUR100/sqm is VERY expensive, its not a SALE price)
# dfrent %>% filter(ppsqm > 100 & price > 10000) # to prevent wrong entries bc of close-to-zero sqm
dfrent[which(dfrent$ppsqm > 100 & dfrent$price > 10000),"to_rent"] = FALSE
# "Sales" that are actually RENTALS
ggplot(data=dfbuy %>% filter(ppsqm < 1000), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# some ppsqms are < 250 (Way too cheap to be a sales price)
# dfbuy %>% filter(ppsqm < 250 & price < 10000) # to prevent wrong entries bc of close-to-zero sqm
dfbuy[which(dfbuy$ppsqm < 250 & dfbuy$price < 10000), "to_rent"] = TRUE
print("SALES that were classified as RENTALS")
dfrent %>% filter(to_rent == FALSE) %>% nrow()
print("Rentals that were classified as SALES")
sum(dfbuy %>% filter(to_rent == TRUE) %>% select("to_rent"))
all_new = rbind(dfrent, dfbuy)
dfrent = all_new %>% filter(to_rent == TRUE)
dfbuy = all_new %>% filter(to_rent == FALSE)
write_parquet(dfrent, "data/dfrent.parquet")
write_parquet(dfbuy, "data/dfbuy.parquet")
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfrent = read_parquet("data/dfrent.parquet")
dfbuy = read_parquet("data/dfbuy.parquet")
#rent_cutoff = quantile(dfrent$price, 0.99)
#buy_cutoff = quantile(dfbuy$price, 0.99)
#dfrent = dfrent %>% filter(price <= rent_cutoff)
#dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# square_meters outliers
dfrent_cutoff = quantile(dfrent$square_meters, 0.999, na.rm=TRUE)
dfbuy_cutoff = quantile(dfbuy$square_meters, 0.999, na.rm = TRUE)
nrow(dfrent %>% filter(square_meters > dfrent_cutoff))  # removes 21 outliers
nrow(dfbuy %>% filter(square_meters > dfbuy_cutoff))  # removes 32 outliers
dfrent = dfrent %>% filter(square_meters <= dfrent_cutoff)
dfbuy = dfbuy %>% filter(square_meters <= dfbuy_cutoff)
# Rent prices
ggplot(data=dfrent, aes(x=log(price))) + geom_histogram(bins=60) + theme_bw()  # some zeros
# Buy prices
ggplot(data=dfbuy, aes(x=price)) + geom_histogram(bins=60) + theme_bw() # many zeros
####################################################
################### RENTAL UNITS ###################
####################################################
################### EDA ###################
# price by sqm
ggplot(data=dfrent, aes(x=square_meters, y=price, color=private_offer)) + geom_point(alpha=0.1) + theme_bw() + geom_smooth(method='lm')
# rooms * sqm interaction
# same direction, but different slopes per n_rooms
ggplot(data=dfrent, aes(x=square_meters, y=price)) + geom_point(alpha=0.5) + geom_smooth(method="lm") + facet_grid(~ rooms)
################### Modelling - Non-hierarchical ###################
# all mean effects
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=dfrent)
summary(model0)
plot(model0)
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfrent = read_parquet("data/dfrent.parquet")
dfbuy = read_parquet("data/dfbuy.parquet")
#rent_cutoff = quantile(dfrent$price, 0.99)
#buy_cutoff = quantile(dfbuy$price, 0.99)
#dfrent = dfrent %>% filter(price <= rent_cutoff)
#dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# square_meters outliers
dfrent_cutoff = quantile(dfrent$square_meters, 0.999, na.rm=TRUE)
dfbuy_cutoff = quantile(dfbuy$square_meters, 0.999, na.rm = TRUE)
nrow(dfrent %>% filter(square_meters > dfrent_cutoff))  # removes 21 outliers
nrow(dfbuy %>% filter(square_meters > dfbuy_cutoff))  # removes 32 outliers
dfrent = dfrent %>% filter(square_meters <= dfrent_cutoff)
dfbuy = dfbuy %>% filter(square_meters <= dfbuy_cutoff)
# Rent prices
ggplot(data=dfrent, aes(x=log(price))) + geom_histogram(bins=60) + theme_bw()  # some zeros
# Buy prices
ggplot(data=dfbuy, aes(x=price)) + geom_histogram(bins=60) + theme_bw() # many zeros
####################################################
################### RENTAL UNITS ###################
####################################################
################### EDA ###################
# price by sqm
ggplot(data=dfrent, aes(x=square_meters, y=price, color=private_offer)) + geom_point(alpha=0.1) + theme_bw() + geom_smooth(method='lm')
# rooms * sqm interaction
# same direction, but different slopes per n_rooms
ggplot(data=dfrent, aes(x=square_meters, y=price)) + geom_point(alpha=0.5) + geom_smooth(method="lm") + facet_grid(~ rooms)
################### Modelling - Non-hierarchical ###################
# all mean effects
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=dfrent)
summary(model0)
plot(model0)
high_dist = c(21527, 19074, 19565)
problematic = c(9841, 13702, 16558)
# refit
leverage_removed = dfrent[-high_dist, ]
leverage_removed = leverage_removed[-problematic, ]
write_parquet(leverage_removed, "data/intermediaries/leverage_removed.parquet")
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=leverage_removed)
summary(model0)
plot(model0)
# room x sqm interaction
model1 = lm(log(price) ~ object_type + private_offer + rooms * square_meters, data=leverage_removed)
summary(model1)
plot(model1)
################### Modelling - Hierarchical ###################
model2 = lmer(log(price) ~ object_type + private_offer + rooms * square_meters + (1 | zip_code), data=leverage_removed)
summary(model2)
# xtable(coef(summary(model2)))
anova(model2, model1)
dotplot(ranef(model2))
## Export Section
ranef(model2)$zip_code
x = ranef(model2, condVar=TRUE)$zip_code
xdf = data.frame(pointest=ranef(model2, condVar=TRUE)$zip_code, err=as.vector(sqrt(attr(x, "postVar"))))
xdf$pointestimate = xdf$X.Intercept.
xdf$zip = rownames(xdf)
xdf$X.Intercept. = NULL
write_parquet(xdf, "data/intermediaries/ranef_by_zipcode_rentals.parquet")
#######################
################## Model Assessment ###################
assess_df = data.frame(preds = fitted(model2), ytrue=log(leverage_removed$price))
assess_df$residuals = assess_df$preds - assess_df$ytrue
ggplot(data=assess_df, aes(x=preds, y=residuals)) + geom_point(alpha=0.2) + theme_bw()
ggplot(data=assess_df, aes(sample=residuals)) + geom_qq() + geom_qq_line() + theme_bw()
################# Random Slopes ##################
# Convergence error
######## EXPERIMENT: PREDICTING PPSQM ###########
# dfrent = dfrent %>% filter(ppsqm <= quantile(dfrent$ppsqm, 0.99))
# ggplot(data=dfrent, aes(x=ppsqm)) + geom_histogram()
#
# mse = function(model, data, ytrue, predict_ppsqm){
#  preds = predict(model, data)
#  if (predict_ppsqm == TRUE){
#    preds = preds * data$square_meters
#  }
#  return(mean((preds - ytrue)^2))
# }
#
# exp_model0 = lm(ppsqm ~ object_type + private_offer + rooms + square_meters, data=dfrent)
# print(mse(exp_model0, dfrent, dfrent$ppsqm, predict_ppsqm=TRUE))
#
# exp_model1 = lm(price ~ object_type + private_offer + rooms + square_meters, data=dfrent)
# print(mse(exp_model1, dfrent, dfrent$price, predict_ppsqm=FALSE))
############## END OF EXPERIMENT ################
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfrent = read_parquet("data/dfrent.parquet")
dfbuy = read_parquet("data/dfbuy.parquet")
#rent_cutoff = quantile(dfrent$price, 0.99)
#buy_cutoff = quantile(dfbuy$price, 0.99)
#dfrent = dfrent %>% filter(price <= rent_cutoff)
#dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# square_meters outliers
dfrent_cutoff = quantile(dfrent$square_meters, 0.999, na.rm=TRUE)
dfbuy_cutoff = quantile(dfbuy$square_meters, 0.999, na.rm = TRUE)
nrow(dfrent %>% filter(square_meters > dfrent_cutoff))  # removes 21 outliers
nrow(dfbuy %>% filter(square_meters > dfbuy_cutoff))  # removes 32 outliers
dfrent = dfrent %>% filter(square_meters <= dfrent_cutoff)
dfbuy = dfbuy %>% filter(square_meters <= dfbuy_cutoff)
####################################################
################### SALES UNITS ####################
####################################################
################### EDA ###################
# price by sqm
ggplot(data=dfbuy, aes(x=square_meters, y=price, color=private_offer)) + geom_point(alpha=0.1) + theme_bw() + geom_smooth(method='lm')
# rooms * sqm interaction
# same direction, but different slopes per n_rooms
ggplot(data=dfbuy, aes(x=square_meters, y=price)) + geom_point(alpha=0.5) + geom_smooth(method="lm") + facet_grid(~ rooms)
################### Modelling - Non-hierarchical ###################
# all mean effects
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=dfbuy)
summary(model0)
# plot(model0)
high_dist = c(90, 12546)
problematic = c(12453, 2475, 9284, 30622, 18394, 22205, 17716, 5827, 30619)
# refit
leverage_removed = dfbuy[-high_dist, ]
leverage_removed = leverage_removed[-problematic, ]
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=leverage_removed)
summary(model0)
# plot(model0)
# room x sqm interaction
model1 = lm(log(price) ~ object_type + private_offer + rooms * square_meters, data=leverage_removed)
summary(model1)
# plot(model1)
anova(model1, model0)
################### Modelling - Hierarchical ###################
model2 = lmer(log(price) ~ object_type + private_offer + rooms * square_meters + (1 | zip_code), data=leverage_removed)
summary(model2)
# xtable(coef(summary(model2)))
anova(model2, model1)
dotplot(ranef(model2))
## Export Section
ranef(model2)$zip_code
x = ranef(model2, condVar=TRUE)$zip_code
xdf = data.frame(pointest=ranef(model2, condVar=TRUE)$zip_code, err=as.vector(sqrt(attr(x, "postVar"))))
xdf$pointestimate = xdf$X.Intercept.
xdf$zip = rownames(xdf)
xdf$X.Intercept. = NULL
write_parquet(xdf, "data/intermediaries/ranef_by_zipcode_sales.parquet")
#######################
dfall = read_parquet("data/berlin_clean.parquet") # NAs???????????????
dim(dfall)
dfrent = all_new %>% filter(to_rent == TRUE)
dfbuy = all_new %>% filter(to_rent == FALSE)
dim(dfrent)
dim(dfbuy)
table(dfrent$object_type)
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfall = read_parquet("data/berlin_clean.parquet") # NAs???????????????
dfrent = dfall %>% filter(to_rent == TRUE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "HOUSE"))
dfrent$object_type = droplevel(dfrent$object_type)
dfbuy = dfall %>% filter(to_rent == FALSE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "SHARED_APARTMENT"))
## some properties with to_rent == TRUE actually have SALES prices!!!
dfrent$ppsqm = dfrent$price / dfrent$square_meters  # price per sqm
dfbuy$ppsqm = dfbuy$price / dfbuy$square_meters  # price per sqm
# "Rentals" that are actually for SALE
ggplot(data=dfrent %>% filter(ppsqm < 200), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# most ppsqms are < 100 (sensible, although EUR100/sqm is VERY expensive, its not a SALE price)
# dfrent %>% filter(ppsqm > 100 & price > 10000) # to prevent wrong entries bc of close-to-zero sqm
dfrent[which(dfrent$ppsqm > 100 & dfrent$price > 10000),"to_rent"] = FALSE
# "Sales" that are actually RENTALS
ggplot(data=dfbuy %>% filter(ppsqm < 1000), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# some ppsqms are < 250 (Way too cheap to be a sales price)
# dfbuy %>% filter(ppsqm < 250 & price < 10000) # to prevent wrong entries bc of close-to-zero sqm
dfbuy[which(dfbuy$ppsqm < 250 & dfbuy$price < 10000), "to_rent"] = TRUE
print("SALES that were classified as RENTALS")
dfrent %>% filter(to_rent == FALSE) %>% nrow()
print("Rentals that were classified as SALES")
sum(dfbuy %>% filter(to_rent == TRUE) %>% select("to_rent"))
all_new = rbind(dfrent, dfbuy)
dfrent = all_new %>% filter(to_rent == TRUE)
dfbuy = all_new %>% filter(to_rent == FALSE)
write_parquet(dfrent, "data/dfrent.parquet")
write_parquet(dfbuy, "data/dfbuy.parquet")
table(dfrent$object_type)
table(dfbuy$object_type)
dim(dfrent)
dim(dfbuy)
library(arrow)
library(dplyr)
library(ggplot2)
df = read_parquet("data/berlin.parquet")
df = df %>% filter(!object_type %in% c("NURSING_HOME", "RETIREMENT_HOME", "HOLIDAY_HOUSE_APARTMENT"))
dim(df)
# Have to be divided by 100 as they are saved as int in the DB.
df$square_meters = df$square_meters / 100  # is now m^2
df$price = df$price / 100  # is now EUR
###### Explicit NA Values ######
colSums(is.na(df), 0)  # ~10k rooms missing
###### Implicit NA Values ######
# Private Offer
table(df$private_offer) # No NAs
# Square Meters
sum(df$square_meters == 0)  # ~5k with 0 sqm size
df$square_meters[df$square_meters == 0, "square_meters"] = NA  # make explicit
###### General EDA ######
### Created at (time of scrape)
min(df$created_at)  # 2021-04-25 13:04:57 EDT
max(df$created_at)  # 2021-10-27 13:57:33 EDT
### Location (dirty!)
# df$location  # ZIPCODE Berlin [Borough], [Address]
### Object Type
table(df$object_type) # Originally: only 3 nursing homes & 17 retirement homes
df$object_type = droplevels(df$object_type)
### Square Meters
# Very few, extreme outliers! (10,000,000 m^2)
ggplot(data=df %>% filter(square_meters < 1000), aes(x=square_meters)) + geom_histogram(bins=60)
quantile_cutoff = quantile(df$square_meters, 0.99, na.rm=T) # remove top 1% of outliers
ggplot(data=df %>% filter(square_meters < quantile_cutoff), aes(x=square_meters)) + geom_histogram(bins=60) + theme_bw()
# Also excludes some of the price outliers
ggplot(data=df %>% filter(square_meters < quantile_cutoff), aes(x=price)) + geom_histogram(bins=60) + theme_bw()
### Rent/Buy
table(df$to_rent)
dfrent = df %>% filter(to_rent==TRUE)
dfbuy = df %>% filter(to_rent==FALSE)
# Seems to be unreliable/with outliers for each category. Rent price up to 21,474,836 EUR
# make explicit
df[df$price == 0, "price"] = NA
df = df %>% filter(price >= 100)  # everything below 100EUR rent can be considered a data entry error or a "per sqm" price
### Price
dim(df)
ggplot(data=df, aes(x=price)) + geom_histogram(bins=60) + theme_bw()+ facet_wrap(~to_rent)
# rent distribution highly skewed (potentially includes properties to buy)
# rent_cutoff = quantile(dfrent$price, 0.99)
# buy_cutoff = quantile(dfbuy$price, 0.99)
# dfrent = dfrent %>% filter(price <= rent_cutoff)
# dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# Rent prices
#ggplot(data=dfrent, aes(x=price)) + geom_histogram(bins=60) + theme_bw()  # some zeros
# Buy prices
#ggplot(data=dfbuy, aes(x=price)) + geom_histogram(bins=60) + theme_bw() # many zeros
### Private offer
table(df$private_offer, df$to_rent)  # fewer private offers than non-private
### Rooms
df[which(df$rooms %in% c("Zimmer k.A.", "k.A. Zimmer", "0")), "rooms"] = NA  # k.A. = keine Angabe = not given
df[which(df$rooms %in% c("Privatzimmer", "Einzelzimmer")), "rooms"] = "1"  # Privatzimmer <=> Private room, Einzelzimmer <=> Sinlge room
levels(df$rooms) = c(levels(df$rooms), "Shared", "Missing")
df[which(df$rooms == "Gemeinsames Zimmer"), "rooms"] = "Shared"  # Geimeinsames Zimmer <=> Shared room
df[which(is.na(df$rooms)), "rooms"] = "Missing"
# Exclude anything with more than 5 rooms or anything that only occurs once
tab = table(df$rooms)  # numerics (whole and decimal numbers) and text ("single room" [Einzelzimmer], "NA" [k.A.])
tab[tab > 1]  # only regard categories that occur multiple times
df = df %>% filter(rooms %in% names(tab[tab > 1] | is.na(df$rooms) | df$rooms == "Missing"))
df = df[as.numeric(as.character(df$rooms)) <= 5 | df$rooms %in% c("Shared", "Missing") | is.na(df$rooms), ]
# merge half-rooms into lower full rooms
df[which(df$rooms == 1.5), "rooms"] = "1"
df[which(df$rooms == 2.5), "rooms"] = "2"
df[which(df$rooms == 3.5), "rooms"] = "3"
df[which(df$rooms == 4.5), "rooms"] = "4"
df$rooms = droplevels(df$rooms)
ggplot(df, aes(x=rooms)) + geom_bar() + theme_bw()
dim(df)
### Square Meters
#sqm_cutoff = quantile(df$square_meters, 0.99, na.rm=T)
# df = df %>% filter(square_meters <= sqm_cutoff)
ggplot(df, aes(x=square_meters)) + geom_histogram() + theme_bw()
### ZIP Code
table(df$zip_code)  # some zips without data...
df$zip_code = droplevels(df$zip_code)
write_parquet(df, "data/berlin_clean.parquet")
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfall = read_parquet("data/berlin_clean.parquet") # NAs???????????????
dfrent = dfall %>% filter(to_rent == TRUE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "HOUSE"))
dfrent$object_type = droplevel(dfrent$object_type)
dfbuy = dfall %>% filter(to_rent == FALSE & ! object_type %in% c("HOLIDAY_HOUSE_APARTMENT", "SHARED_APARTMENT"))
## some properties with to_rent == TRUE actually have SALES prices!!!
dfrent$ppsqm = dfrent$price / dfrent$square_meters  # price per sqm
dfbuy$ppsqm = dfbuy$price / dfbuy$square_meters  # price per sqm
# "Rentals" that are actually for SALE
ggplot(data=dfrent %>% filter(ppsqm < 200), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# most ppsqms are < 100 (sensible, although EUR100/sqm is VERY expensive, its not a SALE price)
# dfrent %>% filter(ppsqm > 100 & price > 10000) # to prevent wrong entries bc of close-to-zero sqm
dfrent[which(dfrent$ppsqm > 100 & dfrent$price > 10000),"to_rent"] = FALSE
# "Sales" that are actually RENTALS
ggplot(data=dfbuy %>% filter(ppsqm < 1000), aes(x=ppsqm)) + geom_histogram() + theme_bw()
# some ppsqms are < 250 (Way too cheap to be a sales price)
# dfbuy %>% filter(ppsqm < 250 & price < 10000) # to prevent wrong entries bc of close-to-zero sqm
dfbuy[which(dfbuy$ppsqm < 250 & dfbuy$price < 10000), "to_rent"] = TRUE
print("SALES that were classified as RENTALS")
dfrent %>% filter(to_rent == FALSE) %>% nrow()
print("Rentals that were classified as SALES")
sum(dfbuy %>% filter(to_rent == TRUE) %>% select("to_rent"))
all_new = rbind(dfrent, dfbuy)
dfrent = all_new %>% filter(to_rent == TRUE)
dfbuy = all_new %>% filter(to_rent == FALSE)
write_parquet(dfrent, "data/dfrent.parquet")
write_parquet(dfbuy, "data/dfbuy.parquet")
dim(dfrent)
dim(dfbuy)
library(arrow)
library(dplyr)
library(ggplot2)
library(lme4)
library(lattice)
dfrent = read_parquet("data/dfrent.parquet")
dfbuy = read_parquet("data/dfbuy.parquet")
#rent_cutoff = quantile(dfrent$price, 0.99)
#buy_cutoff = quantile(dfbuy$price, 0.99)
#dfrent = dfrent %>% filter(price <= rent_cutoff)
#dfbuy = dfbuy %>% filter(price <= buy_cutoff)
# square_meters outliers
dfrent_cutoff = quantile(dfrent$square_meters, 0.999, na.rm=TRUE)
dfbuy_cutoff = quantile(dfbuy$square_meters, 0.999, na.rm = TRUE)
nrow(dfrent %>% filter(square_meters > dfrent_cutoff))  # removes 21 outliers
nrow(dfbuy %>% filter(square_meters > dfbuy_cutoff))  # removes 32 outliers
dfrent = dfrent %>% filter(square_meters <= dfrent_cutoff)
dfbuy = dfbuy %>% filter(square_meters <= dfbuy_cutoff)
# Rent prices
ggplot(data=dfrent, aes(x=log(price))) + geom_histogram(bins=60) + theme_bw()  # some zeros
# Buy prices
ggplot(data=dfbuy, aes(x=price)) + geom_histogram(bins=60) + theme_bw() # many zeros
####################################################
################### RENTAL UNITS ###################
####################################################
################### EDA ###################
# price by sqm
ggplot(data=dfrent, aes(x=square_meters, y=price, color=private_offer)) + geom_point(alpha=0.1) + theme_bw() + geom_smooth(method='lm')
# rooms * sqm interaction
# same direction, but different slopes per n_rooms
ggplot(data=dfrent, aes(x=square_meters, y=price)) + geom_point(alpha=0.5) + geom_smooth(method="lm") + facet_grid(~ rooms)
################### Modelling - Non-hierarchical ###################
# all mean effects
model0 = lm(log(price) ~ object_type + private_offer + rooms + square_meters, data=dfrent)
summary(model0)
# plot(model0)
plot(model0)
plot(model0, which=4) # high cooks dist for 21527, 19074, 19565
